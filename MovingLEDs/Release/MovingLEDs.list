
MovingLEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000eec  08000eec  00010eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f2c  08000f2c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08000f2c  08000f2c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f2c  08000f2c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f2c  08000f2c  00010f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f30  08000f30  00010f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08000f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000024  08000f58  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000f58  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004edd  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000133f  00000000  00000000  00024f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00001093  00000000  00000000  000262b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004d0  00000000  00000000  00027346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000430  00000000  00000000  00027816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002414e  00000000  00000000  00027c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000064a5  00000000  00000000  0004bd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000de03d  00000000  00000000  00052239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000a74  00000000  00000000  00130278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ed4 	.word	0x08000ed4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08000ed4 	.word	0x08000ed4

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b500      	push	{lr}
 80001ca:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001cc:	2244      	movs	r2, #68	; 0x44
 80001ce:	2100      	movs	r1, #0
 80001d0:	a805      	add	r0, sp, #20
 80001d2:	f000 fe53 	bl	8000e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d6:	2214      	movs	r2, #20
 80001d8:	2100      	movs	r1, #0
 80001da:	4668      	mov	r0, sp
 80001dc:	f000 fe4e 	bl	8000e7c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80001e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80001e4:	f000 fa5a 	bl	800069c <HAL_PWREx_ControlVoltageScaling>
 80001e8:	b108      	cbz	r0, 80001ee <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ea:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001ec:	e7fe      	b.n	80001ec <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80001ee:	2310      	movs	r3, #16
 80001f0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80001f2:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80001f4:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f8:	900f      	str	r0, [sp, #60]	; 0x3c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80001fa:	2360      	movs	r3, #96	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80001fe:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000200:	f000 fb12 	bl	8000828 <HAL_RCC_OscConfig>
 8000204:	4601      	mov	r1, r0
 8000206:	b108      	cbz	r0, 800020c <SystemClock_Config+0x44>
 8000208:	b672      	cpsid	i
  while (1)
 800020a:	e7fe      	b.n	800020a <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800020e:	e9cd 3000 	strd	r3, r0, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000212:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000218:	4668      	mov	r0, sp
 800021a:	f000 fd85 	bl	8000d28 <HAL_RCC_ClockConfig>
 800021e:	b108      	cbz	r0, 8000224 <SystemClock_Config+0x5c>
 8000220:	b672      	cpsid	i
  while (1)
 8000222:	e7fe      	b.n	8000222 <SystemClock_Config+0x5a>
}
 8000224:	b017      	add	sp, #92	; 0x5c
 8000226:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800022c <main>:
{
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	b086      	sub	sp, #24
  HAL_Init();
 8000230:	f000 f8ba 	bl	80003a8 <HAL_Init>
  SystemClock_Config();
 8000234:	f7ff ffc8 	bl	80001c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	2214      	movs	r2, #20
 800023a:	2100      	movs	r1, #0
 800023c:	a801      	add	r0, sp, #4
 800023e:	f000 fe1d 	bl	8000e7c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <main+0x78>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000244:	4818      	ldr	r0, [pc, #96]	; (80002a8 <main+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		  HAL_GPIO_WritePin(GPIOC, LEDS[j], GPIO_PIN_SET);
 8000248:	4e17      	ldr	r6, [pc, #92]	; (80002a8 <main+0x7c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024a:	f042 0204 	orr.w	r2, r2, #4
 800024e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	9300      	str	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000258:	2200      	movs	r2, #0
 800025a:	213f      	movs	r1, #63	; 0x3f
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800025c:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800025e:	f000 fa0f 	bl	8000680 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000262:	223f      	movs	r2, #63	; 0x3f
 8000264:	2301      	movs	r3, #1
 8000266:	e9cd 2301 	strd	r2, r3, [sp, #4]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800026a:	480f      	ldr	r0, [pc, #60]	; (80002a8 <main+0x7c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800026e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000270:	e9cd 3303 	strd	r3, r3, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000274:	f000 f926 	bl	80004c4 <HAL_GPIO_Init>
	  for(int j = 0; j <= lenght; j++)
 8000278:	4d0c      	ldr	r5, [pc, #48]	; (80002ac <main+0x80>)
{
 800027a:	2407      	movs	r4, #7
		  HAL_GPIO_WritePin(GPIOC, LEDS[j], GPIO_PIN_SET);
 800027c:	8829      	ldrh	r1, [r5, #0]
 800027e:	2201      	movs	r2, #1
 8000280:	4630      	mov	r0, r6
 8000282:	f000 f9fd 	bl	8000680 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8000286:	20fa      	movs	r0, #250	; 0xfa
 8000288:	f000 f8b0 	bl	80003ec <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, LEDS[j], GPIO_PIN_RESET);
 800028c:	f835 1b04 	ldrh.w	r1, [r5], #4
 8000290:	2200      	movs	r2, #0
 8000292:	4630      	mov	r0, r6
 8000294:	f000 f9f4 	bl	8000680 <HAL_GPIO_WritePin>
		  HAL_Delay(250);
 8000298:	20fa      	movs	r0, #250	; 0xfa
 800029a:	f000 f8a7 	bl	80003ec <HAL_Delay>
	  for(int j = 0; j <= lenght; j++)
 800029e:	3c01      	subs	r4, #1
 80002a0:	d1ec      	bne.n	800027c <main+0x50>
 80002a2:	e7e9      	b.n	8000278 <main+0x4c>
 80002a4:	40021000 	.word	0x40021000
 80002a8:	48000800 	.word	0x48000800
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <HAL_MspInit+0x2c>)
 80002b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80002b4:	f042 0201 	orr.w	r2, r2, #1
 80002b8:	661a      	str	r2, [r3, #96]	; 0x60
 80002ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80002bc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002be:	f002 0201 	and.w	r2, r2, #1
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80002c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002cc:	659a      	str	r2, [r3, #88]	; 0x58
 80002ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002d8:	b002      	add	sp, #8
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002e0:	e7fe      	b.n	80002e0 <NMI_Handler>

080002e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <HardFault_Handler>

080002e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <MemManage_Handler>

080002e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <BusFault_Handler>

080002e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler>

080002ea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ea:	4770      	bx	lr

080002ec <DebugMon_Handler>:
 80002ec:	4770      	bx	lr

080002ee <PendSV_Handler>:
 80002ee:	4770      	bx	lr

080002f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002f0:	f000 b86a 	b.w	80003c8 <HAL_IncTick>

080002f4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80002f4:	4a03      	ldr	r2, [pc, #12]	; (8000304 <SystemInit+0x10>)
 80002f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80002fa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <Reset_Handler>:
 8000308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000340 <LoopForever+0x2>
 800030c:	f7ff fff2 	bl	80002f4 <SystemInit>
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <LoopForever+0x6>)
 8000312:	490d      	ldr	r1, [pc, #52]	; (8000348 <LoopForever+0xa>)
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <LoopForever+0xe>)
 8000316:	2300      	movs	r3, #0
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:
 800031a:	58d4      	ldr	r4, [r2, r3]
 800031c:	50c4      	str	r4, [r0, r3]
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:
 8000320:	18c4      	adds	r4, r0, r3
 8000322:	428c      	cmp	r4, r1
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <LoopForever+0x12>)
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <LoopForever+0x16>)
 800032a:	2300      	movs	r3, #0
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:
 800032e:	6013      	str	r3, [r2, #0]
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:
 8000332:	42a2      	cmp	r2, r4
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>
 8000336:	f000 fda9 	bl	8000e8c <__libc_init_array>
 800033a:	f7ff ff77 	bl	800022c <main>

0800033e <LoopForever>:
 800033e:	e7fe      	b.n	800033e <LoopForever>
 8000340:	20018000 	.word	0x20018000
 8000344:	20000000 	.word	0x20000000
 8000348:	20000024 	.word	0x20000024
 800034c:	08000f34 	.word	0x08000f34
 8000350:	20000024 	.word	0x20000024
 8000354:	20000044 	.word	0x20000044

08000358 <ADC1_2_IRQHandler>:
 8000358:	e7fe      	b.n	8000358 <ADC1_2_IRQHandler>
	...

0800035c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800035c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800035e:	4b0f      	ldr	r3, [pc, #60]	; (800039c <HAL_InitTick+0x40>)
 8000360:	781a      	ldrb	r2, [r3, #0]
{
 8000362:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000364:	b90a      	cbnz	r2, 800036a <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000366:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000368:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800036a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000372:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <HAL_InitTick+0x44>)
 8000374:	6810      	ldr	r0, [r2, #0]
 8000376:	fbb0 f0f3 	udiv	r0, r0, r3
 800037a:	f000 f88f 	bl	800049c <HAL_SYSTICK_Config>
 800037e:	4604      	mov	r4, r0
 8000380:	2800      	cmp	r0, #0
 8000382:	d1f0      	bne.n	8000366 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000384:	2d0f      	cmp	r5, #15
 8000386:	d8ee      	bhi.n	8000366 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000388:	4602      	mov	r2, r0
 800038a:	4629      	mov	r1, r5
 800038c:	f04f 30ff 	mov.w	r0, #4294967295
 8000390:	f000 f852 	bl	8000438 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000394:	4b03      	ldr	r3, [pc, #12]	; (80003a4 <HAL_InitTick+0x48>)
 8000396:	4620      	mov	r0, r4
 8000398:	601d      	str	r5, [r3, #0]
  return status;
 800039a:	e7e5      	b.n	8000368 <HAL_InitTick+0xc>
 800039c:	2000001c 	.word	0x2000001c
 80003a0:	20000018 	.word	0x20000018
 80003a4:	20000020 	.word	0x20000020

080003a8 <HAL_Init>:
{
 80003a8:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003aa:	2003      	movs	r0, #3
 80003ac:	f000 f832 	bl	8000414 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003b0:	200f      	movs	r0, #15
 80003b2:	f7ff ffd3 	bl	800035c <HAL_InitTick>
 80003b6:	4604      	mov	r4, r0
 80003b8:	b918      	cbnz	r0, 80003c2 <HAL_Init+0x1a>
    HAL_MspInit();
 80003ba:	f7ff ff79 	bl	80002b0 <HAL_MspInit>
}
 80003be:	4620      	mov	r0, r4
 80003c0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80003c2:	2401      	movs	r4, #1
 80003c4:	e7fb      	b.n	80003be <HAL_Init+0x16>
	...

080003c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80003c8:	4a03      	ldr	r2, [pc, #12]	; (80003d8 <HAL_IncTick+0x10>)
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <HAL_IncTick+0x14>)
 80003cc:	6811      	ldr	r1, [r2, #0]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	440b      	add	r3, r1
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	20000040 	.word	0x20000040
 80003dc:	2000001c 	.word	0x2000001c

080003e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80003e0:	4b01      	ldr	r3, [pc, #4]	; (80003e8 <HAL_GetTick+0x8>)
 80003e2:	6818      	ldr	r0, [r3, #0]
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000040 	.word	0x20000040

080003ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003ec:	b538      	push	{r3, r4, r5, lr}
 80003ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003f0:	f7ff fff6 	bl	80003e0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003f4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 80003f6:	bf1c      	itt	ne
 80003f8:	4b05      	ldrne	r3, [pc, #20]	; (8000410 <HAL_Delay+0x24>)
 80003fa:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80003fc:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80003fe:	bf18      	it	ne
 8000400:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000402:	f7ff ffed 	bl	80003e0 <HAL_GetTick>
 8000406:	1b43      	subs	r3, r0, r5
 8000408:	42a3      	cmp	r3, r4
 800040a:	d3fa      	bcc.n	8000402 <HAL_Delay+0x16>
  {
  }
}
 800040c:	bd38      	pop	{r3, r4, r5, pc}
 800040e:	bf00      	nop
 8000410:	2000001c 	.word	0x2000001c

08000414 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000414:	4907      	ldr	r1, [pc, #28]	; (8000434 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000416:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800041c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800041e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000420:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000424:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800042c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000430:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000432:	4770      	bx	lr
 8000434:	e000ed00 	.word	0xe000ed00

08000438 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800043a:	b530      	push	{r4, r5, lr}
 800043c:	68dc      	ldr	r4, [r3, #12]
 800043e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000442:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000446:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000448:	2b04      	cmp	r3, #4
 800044a:	bf28      	it	cs
 800044c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800044e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000450:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000454:	bf8c      	ite	hi
 8000456:	3c03      	subhi	r4, #3
 8000458:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800045a:	fa05 f303 	lsl.w	r3, r5, r3
 800045e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000462:	40a5      	lsls	r5, r4
 8000464:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000468:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800046a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800046c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000470:	bfac      	ite	ge
 8000472:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000476:	4a08      	ldrlt	r2, [pc, #32]	; (8000498 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000478:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800047c:	bfb8      	it	lt
 800047e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000482:	b2db      	uxtb	r3, r3
 8000484:	bfaa      	itet	ge
 8000486:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop
 8000494:	e000ed00 	.word	0xe000ed00
 8000498:	e000ed14 	.word	0xe000ed14

0800049c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800049c:	3801      	subs	r0, #1
 800049e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004a2:	d20b      	bcs.n	80004bc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004aa:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ac:	21f0      	movs	r1, #240	; 0xf0
 80004ae:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004bc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004be:	4770      	bx	lr
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800067c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80004cc:	4c69      	ldr	r4, [pc, #420]	; (8000674 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80004ce:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004d0:	680a      	ldr	r2, [r1, #0]
 80004d2:	fa32 f503 	lsrs.w	r5, r2, r3
 80004d6:	d102      	bne.n	80004de <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80004d8:	b003      	add	sp, #12
 80004da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004de:	f04f 0e01 	mov.w	lr, #1
 80004e2:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80004e6:	ea1e 0202 	ands.w	r2, lr, r2
 80004ea:	f000 8090 	beq.w	800060e <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80004ee:	684d      	ldr	r5, [r1, #4]
 80004f0:	f005 0603 	and.w	r6, r5, #3
 80004f4:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80004f8:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80004fc:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80004fe:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000502:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000504:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000508:	f200 8083 	bhi.w	8000612 <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 800050c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800050e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000512:	68cf      	ldr	r7, [r1, #12]
 8000514:	fa07 f708 	lsl.w	r7, r7, r8
 8000518:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800051c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800051e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000520:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000524:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000528:	409f      	lsls	r7, r3
 800052a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800052e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000530:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000532:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000536:	688f      	ldr	r7, [r1, #8]
 8000538:	fa07 f708 	lsl.w	r7, r7, r8
 800053c:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000540:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8000542:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000544:	d071      	beq.n	800062a <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8000546:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000548:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800054c:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000550:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000552:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000556:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000558:	d059      	beq.n	800060e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800055e:	f046 0601 	orr.w	r6, r6, #1
 8000562:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8000566:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800056a:	f023 0703 	bic.w	r7, r3, #3
 800056e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000572:	f006 0601 	and.w	r6, r6, #1
 8000576:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800057a:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800057c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000580:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000582:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000584:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000588:	f04f 0c0f 	mov.w	ip, #15
 800058c:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000590:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000594:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000598:	d05f      	beq.n	800065a <HAL_GPIO_Init+0x196>
 800059a:	4e37      	ldr	r6, [pc, #220]	; (8000678 <HAL_GPIO_Init+0x1b4>)
 800059c:	42b0      	cmp	r0, r6
 800059e:	d05e      	beq.n	800065e <HAL_GPIO_Init+0x19a>
 80005a0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005a4:	42b0      	cmp	r0, r6
 80005a6:	d05c      	beq.n	8000662 <HAL_GPIO_Init+0x19e>
 80005a8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005ac:	42b0      	cmp	r0, r6
 80005ae:	d05a      	beq.n	8000666 <HAL_GPIO_Init+0x1a2>
 80005b0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005b4:	42b0      	cmp	r0, r6
 80005b6:	d058      	beq.n	800066a <HAL_GPIO_Init+0x1a6>
 80005b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005bc:	42b0      	cmp	r0, r6
 80005be:	d056      	beq.n	800066e <HAL_GPIO_Init+0x1aa>
 80005c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80005c4:	42b0      	cmp	r0, r6
 80005c6:	bf0c      	ite	eq
 80005c8:	2606      	moveq	r6, #6
 80005ca:	2607      	movne	r6, #7
 80005cc:	fa06 f60e 	lsl.w	r6, r6, lr
 80005d0:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80005d4:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 80005d6:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 80005d8:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80005da:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80005de:	bf0c      	ite	eq
 80005e0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005e2:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 80005e4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 80005e6:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80005e8:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80005ec:	bf0c      	ite	eq
 80005ee:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005f0:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 80005f2:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 80005f4:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80005f6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 80005fa:	bf0c      	ite	eq
 80005fc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005fe:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8000600:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8000602:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000604:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8000606:	bf54      	ite	pl
 8000608:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800060a:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 800060c:	6026      	str	r6, [r4, #0]
    position++;
 800060e:	3301      	adds	r3, #1
 8000610:	e75e      	b.n	80004d0 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000612:	2e03      	cmp	r6, #3
 8000614:	d18c      	bne.n	8000530 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8000616:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000618:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800061c:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8000620:	409f      	lsls	r7, r3
 8000622:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8000626:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000628:	e78d      	b.n	8000546 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 800062a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800062e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000632:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000636:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800063a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800063e:	f04f 0e0f 	mov.w	lr, #15
 8000642:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000646:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800064a:	690f      	ldr	r7, [r1, #16]
 800064c:	fa07 f70b 	lsl.w	r7, r7, fp
 8000650:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8000654:	f8ca 7020 	str.w	r7, [sl, #32]
 8000658:	e775      	b.n	8000546 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800065a:	2600      	movs	r6, #0
 800065c:	e7b6      	b.n	80005cc <HAL_GPIO_Init+0x108>
 800065e:	2601      	movs	r6, #1
 8000660:	e7b4      	b.n	80005cc <HAL_GPIO_Init+0x108>
 8000662:	2602      	movs	r6, #2
 8000664:	e7b2      	b.n	80005cc <HAL_GPIO_Init+0x108>
 8000666:	2603      	movs	r6, #3
 8000668:	e7b0      	b.n	80005cc <HAL_GPIO_Init+0x108>
 800066a:	2604      	movs	r6, #4
 800066c:	e7ae      	b.n	80005cc <HAL_GPIO_Init+0x108>
 800066e:	2605      	movs	r6, #5
 8000670:	e7ac      	b.n	80005cc <HAL_GPIO_Init+0x108>
 8000672:	bf00      	nop
 8000674:	40010400 	.word	0x40010400
 8000678:	48000400 	.word	0x48000400
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000680:	b10a      	cbz	r2, 8000686 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000682:	6181      	str	r1, [r0, #24]
 8000684:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000686:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000688:	4770      	bx	lr
	...

0800068c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_PWREx_GetVoltageRange+0xc>)
 800068e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8000690:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40007000 	.word	0x40007000

0800069c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800069e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006a0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006a8:	d11d      	bne.n	80006e6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ae:	d101      	bne.n	80006b4 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80006b0:	2000      	movs	r0, #0
 80006b2:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	6813      	ldr	r3, [r2, #0]
 80006b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006be:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2132      	movs	r1, #50	; 0x32
 80006c6:	434b      	muls	r3, r1
 80006c8:	490e      	ldr	r1, [pc, #56]	; (8000704 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80006ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ce:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80006d0:	6951      	ldr	r1, [r2, #20]
 80006d2:	0549      	lsls	r1, r1, #21
 80006d4:	d500      	bpl.n	80006d8 <HAL_PWREx_ControlVoltageScaling+0x3c>
 80006d6:	b923      	cbnz	r3, 80006e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80006d8:	6953      	ldr	r3, [r2, #20]
 80006da:	055b      	lsls	r3, r3, #21
 80006dc:	d5e8      	bpl.n	80006b0 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 80006de:	2003      	movs	r0, #3
}
 80006e0:	4770      	bx	lr
        wait_loop_index--;
 80006e2:	3b01      	subs	r3, #1
 80006e4:	e7f4      	b.n	80006d0 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80006e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80006ea:	bf1f      	itttt	ne
 80006ec:	6813      	ldrne	r3, [r2, #0]
 80006ee:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80006f2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80006f6:	6013      	strne	r3, [r2, #0]
 80006f8:	e7da      	b.n	80006b0 <HAL_PWREx_ControlVoltageScaling+0x14>
 80006fa:	bf00      	nop
 80006fc:	40007000 	.word	0x40007000
 8000700:	20000018 	.word	0x20000018
 8000704:	000f4240 	.word	0x000f4240

08000708 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000708:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800070a:	4d1e      	ldr	r5, [pc, #120]	; (8000784 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800070c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800070e:	00da      	lsls	r2, r3, #3
{
 8000710:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000712:	d518      	bpl.n	8000746 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000714:	f7ff ffba 	bl	800068c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000718:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800071c:	d123      	bne.n	8000766 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800071e:	2c80      	cmp	r4, #128	; 0x80
 8000720:	d929      	bls.n	8000776 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000722:	2ca0      	cmp	r4, #160	; 0xa0
 8000724:	bf8c      	ite	hi
 8000726:	2402      	movhi	r4, #2
 8000728:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800072a:	4917      	ldr	r1, [pc, #92]	; (8000788 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800072c:	680a      	ldr	r2, [r1, #0]
 800072e:	f022 0207 	bic.w	r2, r2, #7
 8000732:	4322      	orrs	r2, r4
 8000734:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000736:	6808      	ldr	r0, [r1, #0]
 8000738:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800073c:	1b00      	subs	r0, r0, r4
 800073e:	bf18      	it	ne
 8000740:	2001      	movne	r0, #1
 8000742:	b003      	add	sp, #12
 8000744:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	65ab      	str	r3, [r5, #88]	; 0x58
 800074e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000758:	f7ff ff98 	bl	800068c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800075c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800075e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000762:	65ab      	str	r3, [r5, #88]	; 0x58
 8000764:	e7d8      	b.n	8000718 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8000766:	2c80      	cmp	r4, #128	; 0x80
 8000768:	d807      	bhi.n	800077a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800076a:	d008      	beq.n	800077e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800076c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000770:	425c      	negs	r4, r3
 8000772:	415c      	adcs	r4, r3
 8000774:	e7d9      	b.n	800072a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000776:	2400      	movs	r4, #0
 8000778:	e7d7      	b.n	800072a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800077a:	2403      	movs	r4, #3
 800077c:	e7d5      	b.n	800072a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800077e:	2402      	movs	r4, #2
 8000780:	e7d3      	b.n	800072a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40022000 	.word	0x40022000

0800078c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <HAL_RCC_GetSysClockFreq+0x8c>)
 800078e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000790:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000792:	f012 020c 	ands.w	r2, r2, #12
 8000796:	d005      	beq.n	80007a4 <HAL_RCC_GetSysClockFreq+0x18>
 8000798:	2a0c      	cmp	r2, #12
 800079a:	d115      	bne.n	80007c8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800079c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80007a0:	2901      	cmp	r1, #1
 80007a2:	d118      	bne.n	80007d6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80007a4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80007a6:	481d      	ldr	r0, [pc, #116]	; (800081c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80007a8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80007aa:	bf55      	itete	pl
 80007ac:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80007b0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80007b2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80007b6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80007ba:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80007be:	b34a      	cbz	r2, 8000814 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80007c0:	2a0c      	cmp	r2, #12
 80007c2:	d009      	beq.n	80007d8 <HAL_RCC_GetSysClockFreq+0x4c>
 80007c4:	2000      	movs	r0, #0
  return sysclockfreq;
 80007c6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80007c8:	2a04      	cmp	r2, #4
 80007ca:	d022      	beq.n	8000812 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80007cc:	2a08      	cmp	r2, #8
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <HAL_RCC_GetSysClockFreq+0x94>)
 80007d0:	bf18      	it	ne
 80007d2:	2000      	movne	r0, #0
 80007d4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80007d6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80007d8:	68da      	ldr	r2, [r3, #12]
 80007da:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80007de:	2a02      	cmp	r2, #2
 80007e0:	d015      	beq.n	800080e <HAL_RCC_GetSysClockFreq+0x82>
 80007e2:	490f      	ldr	r1, [pc, #60]	; (8000820 <HAL_RCC_GetSysClockFreq+0x94>)
 80007e4:	2a03      	cmp	r2, #3
 80007e6:	bf08      	it	eq
 80007e8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80007ea:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80007ec:	68da      	ldr	r2, [r3, #12]
 80007ee:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80007f2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80007f4:	68d8      	ldr	r0, [r3, #12]
 80007f6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80007fa:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80007fe:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000800:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000802:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000804:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8000808:	fbb2 f0f0 	udiv	r0, r2, r0
 800080c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <HAL_RCC_GetSysClockFreq+0x98>)
 8000810:	e7eb      	b.n	80007ea <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	08000efc 	.word	0x08000efc
 8000820:	007a1200 	.word	0x007a1200
 8000824:	00f42400 	.word	0x00f42400

08000828 <HAL_RCC_OscConfig>:
{
 8000828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800082c:	4605      	mov	r5, r0
 800082e:	b918      	cbnz	r0, 8000838 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8000830:	2001      	movs	r0, #1
}
 8000832:	b003      	add	sp, #12
 8000834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000838:	4c92      	ldr	r4, [pc, #584]	; (8000a84 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800083a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800083c:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800083e:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000840:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000842:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000846:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800084a:	d53d      	bpl.n	80008c8 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800084c:	b11e      	cbz	r6, 8000856 <HAL_RCC_OscConfig+0x2e>
 800084e:	2e0c      	cmp	r6, #12
 8000850:	d166      	bne.n	8000920 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000852:	2f01      	cmp	r7, #1
 8000854:	d164      	bne.n	8000920 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	0798      	lsls	r0, r3, #30
 800085a:	d502      	bpl.n	8000862 <HAL_RCC_OscConfig+0x3a>
 800085c:	69ab      	ldr	r3, [r5, #24]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0e6      	beq.n	8000830 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	6a28      	ldr	r0, [r5, #32]
 8000866:	0719      	lsls	r1, r3, #28
 8000868:	bf56      	itet	pl
 800086a:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800086e:	6823      	ldrmi	r3, [r4, #0]
 8000870:	091b      	lsrpl	r3, r3, #4
 8000872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000876:	4298      	cmp	r0, r3
 8000878:	d93b      	bls.n	80008f2 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800087a:	f7ff ff45 	bl	8000708 <RCC_SetFlashLatencyFromMSIRange>
 800087e:	2800      	cmp	r0, #0
 8000880:	d1d6      	bne.n	8000830 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6023      	str	r3, [r4, #0]
 800088a:	6823      	ldr	r3, [r4, #0]
 800088c:	6a2a      	ldr	r2, [r5, #32]
 800088e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000892:	4313      	orrs	r3, r2
 8000894:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000896:	6863      	ldr	r3, [r4, #4]
 8000898:	69ea      	ldr	r2, [r5, #28]
 800089a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800089e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80008a2:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80008a4:	f7ff ff72 	bl	800078c <HAL_RCC_GetSysClockFreq>
 80008a8:	68a3      	ldr	r3, [r4, #8]
 80008aa:	4a77      	ldr	r2, [pc, #476]	; (8000a88 <HAL_RCC_OscConfig+0x260>)
 80008ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008b0:	5cd3      	ldrb	r3, [r2, r3]
 80008b2:	f003 031f 	and.w	r3, r3, #31
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	4b74      	ldr	r3, [pc, #464]	; (8000a8c <HAL_RCC_OscConfig+0x264>)
 80008ba:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80008bc:	4b74      	ldr	r3, [pc, #464]	; (8000a90 <HAL_RCC_OscConfig+0x268>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	f7ff fd4c 	bl	800035c <HAL_InitTick>
        if(status != HAL_OK)
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d1b4      	bne.n	8000832 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	07d8      	lsls	r0, r3, #31
 80008cc:	d45f      	bmi.n	800098e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ce:	682b      	ldr	r3, [r5, #0]
 80008d0:	0799      	lsls	r1, r3, #30
 80008d2:	f100 809e 	bmi.w	8000a12 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	0718      	lsls	r0, r3, #28
 80008da:	f100 80db 	bmi.w	8000a94 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	0759      	lsls	r1, r3, #29
 80008e2:	f100 8101 	bmi.w	8000ae8 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80008e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f040 816a 	bne.w	8000bc2 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80008ee:	2000      	movs	r0, #0
 80008f0:	e79f      	b.n	8000832 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6023      	str	r3, [r4, #0]
 80008fa:	6823      	ldr	r3, [r4, #0]
 80008fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000900:	4303      	orrs	r3, r0
 8000902:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	69ea      	ldr	r2, [r5, #28]
 8000908:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800090c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000910:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000912:	2e00      	cmp	r6, #0
 8000914:	d1c6      	bne.n	80008a4 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000916:	f7ff fef7 	bl	8000708 <RCC_SetFlashLatencyFromMSIRange>
 800091a:	2800      	cmp	r0, #0
 800091c:	d0c2      	beq.n	80008a4 <HAL_RCC_OscConfig+0x7c>
 800091e:	e787      	b.n	8000830 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000920:	69ab      	ldr	r3, [r5, #24]
 8000922:	b31b      	cbz	r3, 800096c <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800092c:	f7ff fd58 	bl	80003e0 <HAL_GetTick>
 8000930:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000932:	6823      	ldr	r3, [r4, #0]
 8000934:	079a      	lsls	r2, r3, #30
 8000936:	d511      	bpl.n	800095c <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	6023      	str	r3, [r4, #0]
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	6a2a      	ldr	r2, [r5, #32]
 8000944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000948:	4313      	orrs	r3, r2
 800094a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	69ea      	ldr	r2, [r5, #28]
 8000950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000954:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000958:	6063      	str	r3, [r4, #4]
 800095a:	e7b5      	b.n	80008c8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800095c:	f7ff fd40 	bl	80003e0 <HAL_GetTick>
 8000960:	eba0 0008 	sub.w	r0, r0, r8
 8000964:	2802      	cmp	r0, #2
 8000966:	d9e4      	bls.n	8000932 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8000968:	2003      	movs	r0, #3
 800096a:	e762      	b.n	8000832 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	f023 0301 	bic.w	r3, r3, #1
 8000972:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000974:	f7ff fd34 	bl	80003e0 <HAL_GetTick>
 8000978:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	079b      	lsls	r3, r3, #30
 800097e:	d5a3      	bpl.n	80008c8 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000980:	f7ff fd2e 	bl	80003e0 <HAL_GetTick>
 8000984:	eba0 0008 	sub.w	r0, r0, r8
 8000988:	2802      	cmp	r0, #2
 800098a:	d9f6      	bls.n	800097a <HAL_RCC_OscConfig+0x152>
 800098c:	e7ec      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800098e:	2e08      	cmp	r6, #8
 8000990:	d003      	beq.n	800099a <HAL_RCC_OscConfig+0x172>
 8000992:	2e0c      	cmp	r6, #12
 8000994:	d108      	bne.n	80009a8 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000996:	2f03      	cmp	r7, #3
 8000998:	d106      	bne.n	80009a8 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	039a      	lsls	r2, r3, #14
 800099e:	d596      	bpl.n	80008ce <HAL_RCC_OscConfig+0xa6>
 80009a0:	686b      	ldr	r3, [r5, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d193      	bne.n	80008ce <HAL_RCC_OscConfig+0xa6>
 80009a6:	e743      	b.n	8000830 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a8:	686b      	ldr	r3, [r5, #4]
 80009aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009ae:	d110      	bne.n	80009d2 <HAL_RCC_OscConfig+0x1aa>
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009b8:	f7ff fd12 	bl	80003e0 <HAL_GetTick>
 80009bc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80009be:	6823      	ldr	r3, [r4, #0]
 80009c0:	039b      	lsls	r3, r3, #14
 80009c2:	d484      	bmi.n	80008ce <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80009c4:	f7ff fd0c 	bl	80003e0 <HAL_GetTick>
 80009c8:	eba0 0008 	sub.w	r0, r0, r8
 80009cc:	2864      	cmp	r0, #100	; 0x64
 80009ce:	d9f6      	bls.n	80009be <HAL_RCC_OscConfig+0x196>
 80009d0:	e7ca      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009d6:	d104      	bne.n	80009e2 <HAL_RCC_OscConfig+0x1ba>
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009de:	6023      	str	r3, [r4, #0]
 80009e0:	e7e6      	b.n	80009b0 <HAL_RCC_OscConfig+0x188>
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009e8:	6022      	str	r2, [r4, #0]
 80009ea:	6822      	ldr	r2, [r4, #0]
 80009ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009f0:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1e0      	bne.n	80009b8 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80009f6:	f7ff fcf3 	bl	80003e0 <HAL_GetTick>
 80009fa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80009fc:	6823      	ldr	r3, [r4, #0]
 80009fe:	0398      	lsls	r0, r3, #14
 8000a00:	f57f af65 	bpl.w	80008ce <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a04:	f7ff fcec 	bl	80003e0 <HAL_GetTick>
 8000a08:	eba0 0008 	sub.w	r0, r0, r8
 8000a0c:	2864      	cmp	r0, #100	; 0x64
 8000a0e:	d9f5      	bls.n	80009fc <HAL_RCC_OscConfig+0x1d4>
 8000a10:	e7aa      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000a12:	2e04      	cmp	r6, #4
 8000a14:	d003      	beq.n	8000a1e <HAL_RCC_OscConfig+0x1f6>
 8000a16:	2e0c      	cmp	r6, #12
 8000a18:	d110      	bne.n	8000a3c <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a1a:	2f02      	cmp	r7, #2
 8000a1c:	d10e      	bne.n	8000a3c <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	0559      	lsls	r1, r3, #21
 8000a22:	d503      	bpl.n	8000a2c <HAL_RCC_OscConfig+0x204>
 8000a24:	68eb      	ldr	r3, [r5, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	f43f af02 	beq.w	8000830 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2c:	6863      	ldr	r3, [r4, #4]
 8000a2e:	692a      	ldr	r2, [r5, #16]
 8000a30:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000a34:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a38:	6063      	str	r3, [r4, #4]
 8000a3a:	e74c      	b.n	80008d6 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a3c:	68eb      	ldr	r3, [r5, #12]
 8000a3e:	b17b      	cbz	r3, 8000a60 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a48:	f7ff fcca 	bl	80003e0 <HAL_GetTick>
 8000a4c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	055a      	lsls	r2, r3, #21
 8000a52:	d4eb      	bmi.n	8000a2c <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a54:	f7ff fcc4 	bl	80003e0 <HAL_GetTick>
 8000a58:	1bc0      	subs	r0, r0, r7
 8000a5a:	2802      	cmp	r0, #2
 8000a5c:	d9f7      	bls.n	8000a4e <HAL_RCC_OscConfig+0x226>
 8000a5e:	e783      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a66:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a68:	f7ff fcba 	bl	80003e0 <HAL_GetTick>
 8000a6c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	055b      	lsls	r3, r3, #21
 8000a72:	f57f af30 	bpl.w	80008d6 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a76:	f7ff fcb3 	bl	80003e0 <HAL_GetTick>
 8000a7a:	1bc0      	subs	r0, r0, r7
 8000a7c:	2802      	cmp	r0, #2
 8000a7e:	d9f6      	bls.n	8000a6e <HAL_RCC_OscConfig+0x246>
 8000a80:	e772      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000
 8000a88:	08000eec 	.word	0x08000eec
 8000a8c:	20000018 	.word	0x20000018
 8000a90:	20000020 	.word	0x20000020
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a94:	696b      	ldr	r3, [r5, #20]
 8000a96:	b19b      	cbz	r3, 8000ac0 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8000a98:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000aa4:	f7ff fc9c 	bl	80003e0 <HAL_GetTick>
 8000aa8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000aaa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000aae:	079a      	lsls	r2, r3, #30
 8000ab0:	f53f af15 	bmi.w	80008de <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ab4:	f7ff fc94 	bl	80003e0 <HAL_GetTick>
 8000ab8:	1bc0      	subs	r0, r0, r7
 8000aba:	2802      	cmp	r0, #2
 8000abc:	d9f5      	bls.n	8000aaa <HAL_RCC_OscConfig+0x282>
 8000abe:	e753      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8000ac0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ac4:	f023 0301 	bic.w	r3, r3, #1
 8000ac8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8000acc:	f7ff fc88 	bl	80003e0 <HAL_GetTick>
 8000ad0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ad2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8000ad6:	079b      	lsls	r3, r3, #30
 8000ad8:	f57f af01 	bpl.w	80008de <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000adc:	f7ff fc80 	bl	80003e0 <HAL_GetTick>
 8000ae0:	1bc0      	subs	r0, r0, r7
 8000ae2:	2802      	cmp	r0, #2
 8000ae4:	d9f5      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x2aa>
 8000ae6:	e73f      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ae8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000aea:	00df      	lsls	r7, r3, #3
 8000aec:	d429      	bmi.n	8000b42 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	65a3      	str	r3, [r4, #88]	; 0x58
 8000af6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afc:	9301      	str	r3, [sp, #4]
 8000afe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b00:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b04:	4f85      	ldr	r7, [pc, #532]	; (8000d1c <HAL_RCC_OscConfig+0x4f4>)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	05d8      	lsls	r0, r3, #23
 8000b0a:	d51d      	bpl.n	8000b48 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0c:	68ab      	ldr	r3, [r5, #8]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d12b      	bne.n	8000b6a <HAL_RCC_OscConfig+0x342>
 8000b12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fc5f 	bl	80003e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b22:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b26:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000b28:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000b2c:	079a      	lsls	r2, r3, #30
 8000b2e:	d542      	bpl.n	8000bb6 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8000b30:	f1b8 0f00 	cmp.w	r8, #0
 8000b34:	f43f aed7 	beq.w	80008e6 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000b3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	65a3      	str	r3, [r4, #88]	; 0x58
 8000b40:	e6d1      	b.n	80008e6 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8000b42:	f04f 0800 	mov.w	r8, #0
 8000b46:	e7dd      	b.n	8000b04 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000b50:	f7ff fc46 	bl	80003e0 <HAL_GetTick>
 8000b54:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	05d9      	lsls	r1, r3, #23
 8000b5a:	d4d7      	bmi.n	8000b0c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b5c:	f7ff fc40 	bl	80003e0 <HAL_GetTick>
 8000b60:	eba0 0009 	sub.w	r0, r0, r9
 8000b64:	2802      	cmp	r0, #2
 8000b66:	d9f6      	bls.n	8000b56 <HAL_RCC_OscConfig+0x32e>
 8000b68:	e6fe      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	d106      	bne.n	8000b7c <HAL_RCC_OscConfig+0x354>
 8000b6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8000b7a:	e7ca      	b.n	8000b12 <HAL_RCC_OscConfig+0x2ea>
 8000b7c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000b80:	f022 0201 	bic.w	r2, r2, #1
 8000b84:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8000b88:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8000b8c:	f022 0204 	bic.w	r2, r2, #4
 8000b90:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1c2      	bne.n	8000b1e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8000b98:	f7ff fc22 	bl	80003e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b9c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ba0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ba2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8000ba6:	079b      	lsls	r3, r3, #30
 8000ba8:	d5c2      	bpl.n	8000b30 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000baa:	f7ff fc19 	bl	80003e0 <HAL_GetTick>
 8000bae:	1bc0      	subs	r0, r0, r7
 8000bb0:	4548      	cmp	r0, r9
 8000bb2:	d9f6      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x37a>
 8000bb4:	e6d8      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fc13 	bl	80003e0 <HAL_GetTick>
 8000bba:	1bc0      	subs	r0, r0, r7
 8000bbc:	4548      	cmp	r0, r9
 8000bbe:	d9b3      	bls.n	8000b28 <HAL_RCC_OscConfig+0x300>
 8000bc0:	e6d2      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	f040 808f 	bne.w	8000ce6 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8000bc8:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000bcc:	f003 0103 	and.w	r1, r3, #3
 8000bd0:	4291      	cmp	r1, r2
 8000bd2:	d124      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000bd4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8000bd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000bda:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bdc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8000be0:	d11d      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000be2:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8000be4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000be8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8000bec:	d117      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000bee:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000bf0:	3a07      	subs	r2, #7
 8000bf2:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8000bf6:	bf18      	it	ne
 8000bf8:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000bfa:	4291      	cmp	r1, r2
 8000bfc:	d10f      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000bfe:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000c00:	0852      	lsrs	r2, r2, #1
 8000c02:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8000c06:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000c08:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8000c0c:	d107      	bne.n	8000c1e <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000c0e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c10:	0852      	lsrs	r2, r2, #1
 8000c12:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8000c16:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000c18:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8000c1c:	d04a      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000c1e:	2e0c      	cmp	r6, #12
 8000c20:	f43f ae06 	beq.w	8000830 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	015f      	lsls	r7, r3, #5
 8000c28:	f53f ae02 	bmi.w	8000830 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	00de      	lsls	r6, r3, #3
 8000c30:	f53f adfe 	bmi.w	8000830 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c3a:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8000c3c:	f7ff fbd0 	bl	80003e0 <HAL_GetTick>
 8000c40:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000c42:	6823      	ldr	r3, [r4, #0]
 8000c44:	0198      	lsls	r0, r3, #6
 8000c46:	d42f      	bmi.n	8000ca8 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c48:	68e2      	ldr	r2, [r4, #12]
 8000c4a:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <HAL_RCC_OscConfig+0x4f8>)
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000c50:	4313      	orrs	r3, r2
 8000c52:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c58:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000c5a:	3a01      	subs	r2, #1
 8000c5c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c60:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000c62:	0912      	lsrs	r2, r2, #4
 8000c64:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8000c68:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000c6a:	0852      	lsrs	r2, r2, #1
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8000c72:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000c74:	0852      	lsrs	r2, r2, #1
 8000c76:	3a01      	subs	r2, #1
 8000c78:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8000c7c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c84:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000c86:	68e3      	ldr	r3, [r4, #12]
 8000c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c8c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8000c8e:	f7ff fba7 	bl	80003e0 <HAL_GetTick>
 8000c92:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	0199      	lsls	r1, r3, #6
 8000c98:	f53f ae29 	bmi.w	80008ee <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c9c:	f7ff fba0 	bl	80003e0 <HAL_GetTick>
 8000ca0:	1b40      	subs	r0, r0, r5
 8000ca2:	2802      	cmp	r0, #2
 8000ca4:	d9f6      	bls.n	8000c94 <HAL_RCC_OscConfig+0x46c>
 8000ca6:	e65f      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ca8:	f7ff fb9a 	bl	80003e0 <HAL_GetTick>
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	2802      	cmp	r0, #2
 8000cb0:	d9c7      	bls.n	8000c42 <HAL_RCC_OscConfig+0x41a>
 8000cb2:	e659      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000cb4:	6823      	ldr	r3, [r4, #0]
 8000cb6:	019a      	lsls	r2, r3, #6
 8000cb8:	f53f ae19 	bmi.w	80008ee <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000cc4:	68e3      	ldr	r3, [r4, #12]
 8000cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cca:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8000ccc:	f7ff fb88 	bl	80003e0 <HAL_GetTick>
 8000cd0:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	f53f ae0a 	bmi.w	80008ee <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000cda:	f7ff fb81 	bl	80003e0 <HAL_GetTick>
 8000cde:	1b40      	subs	r0, r0, r5
 8000ce0:	2802      	cmp	r0, #2
 8000ce2:	d9f6      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x4aa>
 8000ce4:	e640      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ce6:	2e0c      	cmp	r6, #12
 8000ce8:	f43f ada2 	beq.w	8000830 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000cf2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fb74 	bl	80003e0 <HAL_GetTick>
 8000cf8:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8000d00:	d105      	bne.n	8000d0e <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000d02:	68e1      	ldr	r1, [r4, #12]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_RCC_OscConfig+0x4fc>)
 8000d06:	400a      	ands	r2, r1
 8000d08:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	e591      	b.n	8000832 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d0e:	f7ff fb67 	bl	80003e0 <HAL_GetTick>
 8000d12:	1b40      	subs	r0, r0, r5
 8000d14:	2802      	cmp	r0, #2
 8000d16:	d9f0      	bls.n	8000cfa <HAL_RCC_OscConfig+0x4d2>
 8000d18:	e626      	b.n	8000968 <HAL_RCC_OscConfig+0x140>
 8000d1a:	bf00      	nop
 8000d1c:	40007000 	.word	0x40007000
 8000d20:	f99d808c 	.word	0xf99d808c
 8000d24:	feeefffc 	.word	0xfeeefffc

08000d28 <HAL_RCC_ClockConfig>:
{
 8000d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d2c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000d2e:	4604      	mov	r4, r0
 8000d30:	b910      	cbnz	r0, 8000d38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000d32:	2001      	movs	r0, #1
}
 8000d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d38:	4a4b      	ldr	r2, [pc, #300]	; (8000e68 <HAL_RCC_ClockConfig+0x140>)
 8000d3a:	6813      	ldr	r3, [r2, #0]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d32c      	bcc.n	8000d9e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d44:	6821      	ldr	r1, [r4, #0]
 8000d46:	0788      	lsls	r0, r1, #30
 8000d48:	d434      	bmi.n	8000db4 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d4a:	07c9      	lsls	r1, r1, #31
 8000d4c:	d43f      	bmi.n	8000dce <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4e:	6821      	ldr	r1, [r4, #0]
 8000d50:	078a      	lsls	r2, r1, #30
 8000d52:	d468      	bmi.n	8000e26 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d54:	4a44      	ldr	r2, [pc, #272]	; (8000e68 <HAL_RCC_ClockConfig+0x140>)
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d86f      	bhi.n	8000e40 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d60:	f011 0f04 	tst.w	r1, #4
 8000d64:	4d41      	ldr	r5, [pc, #260]	; (8000e6c <HAL_RCC_ClockConfig+0x144>)
 8000d66:	d177      	bne.n	8000e58 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d68:	070b      	lsls	r3, r1, #28
 8000d6a:	d506      	bpl.n	8000d7a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d6c:	68ab      	ldr	r3, [r5, #8]
 8000d6e:	6922      	ldr	r2, [r4, #16]
 8000d70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d78:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d7a:	f7ff fd07 	bl	800078c <HAL_RCC_GetSysClockFreq>
 8000d7e:	68ab      	ldr	r3, [r5, #8]
 8000d80:	4a3b      	ldr	r2, [pc, #236]	; (8000e70 <HAL_RCC_ClockConfig+0x148>)
 8000d82:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8000d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d8a:	5cd3      	ldrb	r3, [r2, r3]
 8000d8c:	f003 031f 	and.w	r3, r3, #31
 8000d90:	40d8      	lsrs	r0, r3
 8000d92:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <HAL_RCC_ClockConfig+0x14c>)
 8000d94:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <HAL_RCC_ClockConfig+0x150>)
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	f7ff badf 	b.w	800035c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d9e:	6813      	ldr	r3, [r2, #0]
 8000da0:	f023 0307 	bic.w	r3, r3, #7
 8000da4:	430b      	orrs	r3, r1
 8000da6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d1bf      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xa>
 8000db2:	e7c7      	b.n	8000d44 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000db4:	4a2d      	ldr	r2, [pc, #180]	; (8000e6c <HAL_RCC_ClockConfig+0x144>)
 8000db6:	68a0      	ldr	r0, [r4, #8]
 8000db8:	6893      	ldr	r3, [r2, #8]
 8000dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000dbe:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dc0:	bf81      	itttt	hi
 8000dc2:	6893      	ldrhi	r3, [r2, #8]
 8000dc4:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8000dc8:	4303      	orrhi	r3, r0
 8000dca:	6093      	strhi	r3, [r2, #8]
 8000dcc:	e7bd      	b.n	8000d4a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dce:	6862      	ldr	r2, [r4, #4]
 8000dd0:	4e26      	ldr	r6, [pc, #152]	; (8000e6c <HAL_RCC_ClockConfig+0x144>)
 8000dd2:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dd4:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dd6:	d11a      	bne.n	8000e0e <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ddc:	d0a9      	beq.n	8000d32 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000dde:	68b3      	ldr	r3, [r6, #8]
 8000de0:	f023 0303 	bic.w	r3, r3, #3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000de8:	f7ff fafa 	bl	80003e0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dec:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000df0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000df2:	68b3      	ldr	r3, [r6, #8]
 8000df4:	6862      	ldr	r2, [r4, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000dfe:	d0a6      	beq.n	8000d4e <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e00:	f7ff faee 	bl	80003e0 <HAL_GetTick>
 8000e04:	1bc0      	subs	r0, r0, r7
 8000e06:	4540      	cmp	r0, r8
 8000e08:	d9f3      	bls.n	8000df2 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	e792      	b.n	8000d34 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e0e:	2a02      	cmp	r2, #2
 8000e10:	d102      	bne.n	8000e18 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e16:	e7e1      	b.n	8000ddc <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000e18:	b912      	cbnz	r2, 8000e20 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e1a:	f013 0f02 	tst.w	r3, #2
 8000e1e:	e7dd      	b.n	8000ddc <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e20:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e24:	e7da      	b.n	8000ddc <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000e26:	4a11      	ldr	r2, [pc, #68]	; (8000e6c <HAL_RCC_ClockConfig+0x144>)
 8000e28:	68a0      	ldr	r0, [r4, #8]
 8000e2a:	6893      	ldr	r3, [r2, #8]
 8000e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e30:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e32:	bf3f      	itttt	cc
 8000e34:	6893      	ldrcc	r3, [r2, #8]
 8000e36:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8000e3a:	4303      	orrcc	r3, r0
 8000e3c:	6093      	strcc	r3, [r2, #8]
 8000e3e:	e789      	b.n	8000d54 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e40:	6813      	ldr	r3, [r2, #0]
 8000e42:	f023 0307 	bic.w	r3, r3, #7
 8000e46:	432b      	orrs	r3, r5
 8000e48:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	f47f af6e 	bne.w	8000d32 <HAL_RCC_ClockConfig+0xa>
 8000e56:	e783      	b.n	8000d60 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e58:	68ab      	ldr	r3, [r5, #8]
 8000e5a:	68e2      	ldr	r2, [r4, #12]
 8000e5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e60:	4313      	orrs	r3, r2
 8000e62:	60ab      	str	r3, [r5, #8]
 8000e64:	e780      	b.n	8000d68 <HAL_RCC_ClockConfig+0x40>
 8000e66:	bf00      	nop
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	08000eec 	.word	0x08000eec
 8000e74:	20000018 	.word	0x20000018
 8000e78:	20000020 	.word	0x20000020

08000e7c <memset>:
 8000e7c:	4402      	add	r2, r0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d100      	bne.n	8000e86 <memset+0xa>
 8000e84:	4770      	bx	lr
 8000e86:	f803 1b01 	strb.w	r1, [r3], #1
 8000e8a:	e7f9      	b.n	8000e80 <memset+0x4>

08000e8c <__libc_init_array>:
 8000e8c:	b570      	push	{r4, r5, r6, lr}
 8000e8e:	4d0d      	ldr	r5, [pc, #52]	; (8000ec4 <__libc_init_array+0x38>)
 8000e90:	4c0d      	ldr	r4, [pc, #52]	; (8000ec8 <__libc_init_array+0x3c>)
 8000e92:	1b64      	subs	r4, r4, r5
 8000e94:	10a4      	asrs	r4, r4, #2
 8000e96:	2600      	movs	r6, #0
 8000e98:	42a6      	cmp	r6, r4
 8000e9a:	d109      	bne.n	8000eb0 <__libc_init_array+0x24>
 8000e9c:	4d0b      	ldr	r5, [pc, #44]	; (8000ecc <__libc_init_array+0x40>)
 8000e9e:	4c0c      	ldr	r4, [pc, #48]	; (8000ed0 <__libc_init_array+0x44>)
 8000ea0:	f000 f818 	bl	8000ed4 <_init>
 8000ea4:	1b64      	subs	r4, r4, r5
 8000ea6:	10a4      	asrs	r4, r4, #2
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	42a6      	cmp	r6, r4
 8000eac:	d105      	bne.n	8000eba <__libc_init_array+0x2e>
 8000eae:	bd70      	pop	{r4, r5, r6, pc}
 8000eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb4:	4798      	blx	r3
 8000eb6:	3601      	adds	r6, #1
 8000eb8:	e7ee      	b.n	8000e98 <__libc_init_array+0xc>
 8000eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ebe:	4798      	blx	r3
 8000ec0:	3601      	adds	r6, #1
 8000ec2:	e7f2      	b.n	8000eaa <__libc_init_array+0x1e>
 8000ec4:	08000f2c 	.word	0x08000f2c
 8000ec8:	08000f2c 	.word	0x08000f2c
 8000ecc:	08000f2c 	.word	0x08000f2c
 8000ed0:	08000f30 	.word	0x08000f30

08000ed4 <_init>:
 8000ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ed6:	bf00      	nop
 8000ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eda:	bc08      	pop	{r3}
 8000edc:	469e      	mov	lr, r3
 8000ede:	4770      	bx	lr

08000ee0 <_fini>:
 8000ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee2:	bf00      	nop
 8000ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ee6:	bc08      	pop	{r3}
 8000ee8:	469e      	mov	lr, r3
 8000eea:	4770      	bx	lr
